<!DOCTYPE html>
<html>
<head>
    <title>DevLink 2014 Demo</title>
    <link href="//cdn.kendostatic.com/2014.2.716/styles/kendo.common.min.css" rel="stylesheet" />
    <link href="//cdn.kendostatic.com/2014.2.716/styles/kendo.default.min.css" rel="stylesheet" />
    <script src="//cdn.kendostatic.com/2014.2.716/js/jquery.min.js"></script>
    <script src="//cdn.kendostatic.com/2014.2.716/js/angular.min.js"></script>
    <script src="//cdn.kendostatic.com/2014.2.716/js/kendo.all.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/underscore.string/2.3.3/underscore.string.min.js"></script>
    <script src="/js/util.js"></script>
</head>
<body>

    <div id="pnlPerformance" ng-app="DevLinkDemo" ng-controller="DemoCtrl">
        <div id="pnlDateSearch">
            <label>From:</label>
            <input kendo-date-picker k-options="oDtOptions" ng-model="sFrom" k-ng-model="dtFrom" />
            <br />
            <label>To:</label>
            <input kendo-date-picker k-options="oDtOptions" ng-model="sTo" k-ng-model="dtTo" />
        </div>
        <div id="pnlOverview">
            <label>Total Site Visits:</label> <span>{{ gData.visits | number  }}</span>
            <label>Avg Time on Site:</label> <span>{{ parseSeconds(gData.avgTimeOnSite) }}</span>
            <label>Page Views Per Visit:</label> <span>{{ gData.pageviewsPerVisit | number : 2 }}</span>
        </div>
        <div id="pnlDetails"></div>
    </div>

    <script>
        // save a handle to our module so we can declare a factory for our service
        var devLinkDemo = angular.module("DevLinkDemo", ["kendo.directives"]);

        devLinkDemo.factory('gaUtil', [function () {
            var gaUtil = {
                // start date to run queries for
                fromDate: new Date(),

                // end date to run queries for
                toDate: new Date(),

                // URL creation function for constructing advanced analytics search URLs
                createUrl: function (sMetrics, sDimenstions, sSort, sFilter) {
                    // prevent passing 'undefined' for optional params
                    sDimenstions = sDimenstions || '';
                    sSort = sSort || '';
                    sFilter = sFilter || '';
                    return '/ga.ashx?metrics={0}&dimensions={1}&sort={2}&filter={3}&from={4}&to={5}'.format(sMetrics, sDimenstions, sSort, sFilter, this.fromDate.format('mmddyyyy'), this.toDate.format('mmddyyyy'));
                },

                // converts Google's "columnHeaders" and "rows" arrays into a single array of strongly typed data objects
                processData: function (oRawData) {
                    var arrData = [],
                        arrHeaders = [];

                    // process the header
                    for (var i = 0; i < oRawData.columnHeaders.length; i++) {
                        // add the name propery without the ga: clutter
                        var oHead = { 'name': oRawData.columnHeaders[i].name.replace('ga:', '') };

                        // create a custom parse function based on the dataType
                        switch (oRawData.columnHeaders[i].dataType) {
                            case 'INTEGER':
                                oHead.parse = function (sVal) { return parseInt(sVal); };
                                break;

                            case 'FLOAT':
                            case 'PERCENT':
                            case 'TIME':
                                oHead.parse = function (sVal) { return parseFloat(sVal); };
                                break;

                            default:
                                oHead.parse = function (sVal) { return sVal; };
                                break;
                        }

                        arrHeaders.push(oHead);
                    }

                    // loop through all rows, declaring readability handles to rows & col data
                    for (i = 0; i < oRawData.rows.length; i++) {
                        var oData = {},
                            oRow = oRawData.rows[i];

                        // parse the data with the columns parse method
                        for (var j = 0; j < arrHeaders.length; j++) {
                            var oCol = arrHeaders[j];
                            oData[oCol.name] = oCol.parse(oRow[j]);
                        }

                        arrData.push(oData);
                    }

                    return arrData;
                }
            };

            // return the customized gaUtil object
            return gaUtil;
        }]);

        var DemoCtrl = function ($scope, $http, gaUtil) {
            // expose a method to translate seconds into a more readible format
            $scope.parseSeconds = function (fSec) {
                if (isNaN(fSec))
                    return '';

                var min = Math.floor(fSec / 60),
                    sec = Math.round(fSec - min * 60);
                return '{0} min {1} sec'.format(min, sec);
            }

            // create a bucket to store all our Google data in
            var gData = $scope.gData = {};

            // declare shared options for the date pickers
            $scope.oDtOptions = {
                change: function (e) {
                    // if we have a from and to date, run the querys
                    if ($scope.dtFrom && $scope.dtTo) {
                        // update our gaUtil object to reflect the new dates
                        gaUtil.fromDate = $scope.dtFrom;
                        gaUtil.toDate = $scope.dtTo;

                        // query for the site-wide stats (visits, avg time on site, page views per visit)
                        var sUrl = gaUtil.createUrl('ga:visits,ga:avgTimeOnSite,ga:pageviewsPerVisit');

                        // make a request, update our model
                        $http.get(sUrl).success(function (oJson) {
                            // we know there is 1 row of data (based on the question we are asking)
                            var oData = gaUtil.processData(oJson)[0];
                            gData.visits = oData.visits;
                            gData.avgTimeOnSite = oData.avgTimeOnSite;
                            gData.pageviewsPerVisit = oData.pageviewsPerVisit;
                        });

                        // make a request, update our model
                        $http.get('/ga.ashx?goals=true').success(function (oJson) {
                            // parse out items[{}]
                            gData.goals = [];

                            _.each(oJson.items, function (oGoal) {
                                // query the details of all active goals
                                if (oGoal.active) {
                                    // save a handle to the goal data
                                    gData.goals.push(oGoal);
                                    
                                    // ask for this goal's ConversionRate, Abandons, AbandonRate, Starts & Completions
                                    var sGoalUrl = gaUtil.createUrl('ga:goal{0}ConversionRate,ga:goal{0}Abandons,ga:goalAbandonsAll,ga:goal{0}AbandonRate,ga:goalAbandonRateAll,ga:goal{0}Starts,ga:goalStartsAll,ga:goal{0}Completions,ga:goalCompletionsAll'.format(oGoal.id));
                                    $http.get(sGoalUrl).success(function (oJsonInner) {
                                        console.log(oGoal.name);
                                        console.log(oJsonInner);
                                        // we know there is 1 row of data (based on the question we are asking)
                                        oGoal.details = gaUtil.processData(oJsonInner)[0];
                                    });
                                }
                            });
                        });
                    }
                }
            }
        }
    </script>
    <style scoped>
        /* Basic Styling to make this easy on the eyes */
        body {
            font-family: Arial, Helvetica, sans-serif;
        }

        label {
            display: inline-block;
            text-align: right;
        }

        #pnlPerformance {
            margin: 20px;
            padding: 20px;
            border: 2px solid #333;
            border-radius: 10px;
        }

        #pnlDateSearch {
            float: left;
            margin: 0 30px 0 0;
        }

            #pnlDateSearch label {
                width: 50px;
            }

        #pnlOverview {
            float: left;
        }

            #pnlOverview label {
                width: 160px;
            }

            #pnlOverview span {
                display: inline-block;
                padding: 0 30px 0 6px;
                font-size: 30px;
                vertical-align: middle;
            }

        #pnlDetails {
            clear: both;
        }
    </style>
</body>
